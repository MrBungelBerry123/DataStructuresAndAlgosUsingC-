Def:
Array[K] - Keeps track of the least k elements.
MinHeap - A standard min heap. Keeps track of the remaining elements.


K_Insert(Key):
0 - if currentSize = 0:
1 - 	Array[currentSize++] = Key
2 - 	return
3 - trev = currentSize - 1
4 - while trev >= 0 and arr[trev] > key:
5 - 	arr[trev + 1] = arr[trev]
6 - arr[trev + 1] = key
7 - currentSize += 1

K_Delete(Index):
0 - if currentSize < Index:
1 - 	throw exception
2 - trev = Index
3 - while trev < currentSize:
4 - 	arr[trev] = arr[trev - 1]
5 - 	trev++
6 - currentSize--

Insert(Key):
0 - if currentSize < k:
1 - 	K_Insert(Key)
2 -     return
3 - else if Key < arr[currentSize - 1]:
4 - 	temp = arr[currentSize - 1]
5 - 	currentSize -= 1
6 - 	K_Insert(Key)
7 -  	heap.insert(temp)
8 - 	return
9 - heap.insert(Key)	

Remove(Index):
0 - if heap isEmpty:
1 - 	throw exception
2 - else if index < 0 or index > size:
3 - 	throw exception
4 - if index >= k:
5 - 	head.remove(Index)
6 - 	return
7 - K_Delete(Index)
8 - 

// Assume that currentSize <= k - 1

isFull():
1 - return heap.isFull()

ArrayInsert(Key):
0 - trev = currentSize
1 - while trev >= 0 and arr[trev] > Key:
2 - 	arr[trev + 1] = arr[trev]
3 - 	trev--
4 - arr[trev + 1] = Key
5 - currentSize += 1

Insert(Key):
0 - if isFull()
1 - 	throw exception
2 - else if currentSize < k-1:
3 - 	ArrayInsert(Key)
4 - 	return
5 -	else if arr[k - 1] > Key:
6 -		temp = arr[k - 1]
7 - 	currentSize--
8 -		ArrayInsert(Key)
9 - 	heap.insert(temp)
10- 	return
11- heap.insert(key) 

ArrayDelete(index):
0 - trev = index
1 - while trev < currentSize:
2 - 	arr[trev] = arr[trev + 1]
3 - 	trev++
4 - currentSize -= 1

1 4 6 8 8